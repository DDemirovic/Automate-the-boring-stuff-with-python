					Chapter 3
1. Why are functions advantageous to have in your programs?
-Lesbarkeit, einfachere wiederverwendung, bug fixing leicht gemacht (anstelle von jede einzelne code Kopie händisch aufsuchen und fixen und ggf. welche vergessen oder gar vertippen)

2. When does the code in a function execute: when the function is defined or when the function is called?
-called

3. What statement creates a function?
def functionName()

4. What is the difference between a function and a function call?
-function macht etwas, function call ruft ebendiese auf

5. How many global scopes are there in a Python program? How many local scopes?
-1 global scope
-X local scopes

6. What happens to variables in a local scope when the function call returns?
-they are destroyed

7. What is a return value? Can a return value be part of an expression?
-nö

8. If a function does not have a return statement, what is the return value of a call to that function?
-None

9. How can you force a variable in a function to refer to the global variable?
-keyword "global" vor der Variable

10. What is the data type of None?
-NoneType (null value bzw kein value at all). Definitiv nicht das selbe wie 0 bzw False bzw empty string

11. What does the import areallyourpetsnamederic statement do?
-importiert die genannte library

12. If you had a function named bacon() in a module named spam, how would you call it after importing spam?
import spam
spam.bacon()

13. How can you prevent a program from crashing when it gets an error?
try/except

14. What goes in the try clause? What goes in the except clause?
try:
	code
except (ERRORMESSAGE DIE ERSCHEINT IN DER KONSOLE):
	code

	(Die Errormessage würde bewirken, dass das bei nur genau dieser in except reingeht)
